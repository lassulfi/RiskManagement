/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.aplicativo.telas;

import com.aplicativo.controles.RepositoryManager;
import com.aplicativo.controles.RiscoController;
import com.aplicativo.entidades.Risco;
import java.io.File;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author luis.assulfi
 */
public class TelaPrincipal extends javax.swing.JFrame {

    private Risco risco;

    //Criando o file chooser
    final JFileChooser fc = new JFileChooser("C:\\Users\\Public\\GestorRiscos\\");

    /**
     * Creates new form TelaPrincipal
     */
    public TelaPrincipal() {
        initComponents();
        /*
        //Verficiando se existe algum risco cadastrado.
        //Em caso positivo habilita os botões "Cadastrar ações" "Relatório"
        Risco r = this.risco;
        
        if( r == null){
            jButtonCadastrarAcoes.setEnabled(false);
            jButtonRelatorioRiscos.setEnabled(false);
        } else {
            jButtonCadastrarAcoes.setEnabled(true);
            jButtonRelatorioRiscos.setEnabled(true);
        }
         */

        //configurando para centralizar a janela atual
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonSair = new javax.swing.JButton();
        jButtonCadastrarRiscos = new javax.swing.JButton();
        jButtonRelatorioRiscos = new javax.swing.JButton();
        jButtonCadastrarAcoes = new javax.swing.JButton();
        jButtonExportarDados = new javax.swing.JButton();
        jButtonImportarDados = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sistema de Gestão de Riscos - HYDROCOM");

        jButtonSair.setText("Sair");
        jButtonSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSairActionPerformed(evt);
            }
        });

        jButtonCadastrarRiscos.setText("Cadastrar Riscos");
        jButtonCadastrarRiscos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCadastrarRiscosActionPerformed(evt);
            }
        });

        jButtonRelatorioRiscos.setText("Relatorio de Riscos");
        jButtonRelatorioRiscos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRelatorioRiscosActionPerformed(evt);
            }
        });

        jButtonCadastrarAcoes.setText("Cadastar Ações para Riscos");
        jButtonCadastrarAcoes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCadastrarAcoesActionPerformed(evt);
            }
        });

        jButtonExportarDados.setText("Salvar arquivo de dados");
        jButtonExportarDados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExportarDadosActionPerformed(evt);
            }
        });

        jButtonImportarDados.setText("Abrir arquivo de dados");
        jButtonImportarDados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonImportarDadosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonSair, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jButtonRelatorioRiscos, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jButtonCadastrarRiscos, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(18, 18, 18)
                                        .addComponent(jButtonCadastrarAcoes))
                                    .addComponent(jButtonExportarDados)))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jButtonImportarDados, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 61, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jButtonImportarDados)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonCadastrarRiscos)
                    .addComponent(jButtonCadastrarAcoes))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonRelatorioRiscos)
                .addGap(100, 100, 100)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSair)
                    .addComponent(jButtonExportarDados))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSairActionPerformed
        System.out.println("Clique no botão sair");
        System.out.println("Saindo do sistema");
        
        Object[] opcoes = {"Sim", "Não"};
        
        int opcao = JOptionPane.showOptionDialog(null, "Sair sem salvar?",
                "Sair", JOptionPane.DEFAULT_OPTION,
                JOptionPane.WARNING_MESSAGE, null, opcoes, opcoes[0]);

        if (opcao == 0 || opcao == -1) {
        
        System.exit(0);
        
        }


    }//GEN-LAST:event_jButtonSairActionPerformed

    private void jButtonCadastrarRiscosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCadastrarRiscosActionPerformed
        System.out.println("Clique no botão cadastrar riscos");
        System.out.println("Exibir tela de cadastro de riscos");
        //Desabilitando tela atual
        this.setEnabled(false);

        new TelaCadastroRiscos(this).setVisible(true);
    }//GEN-LAST:event_jButtonCadastrarRiscosActionPerformed

    private void jButtonCadastrarAcoesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCadastrarAcoesActionPerformed
        System.out.println("Clique no botão para cadastrar ações para os riscos");
        System.out.println("Exibir tela de cadastro de açoes para os riscos");
        //Desabilitando a tela principal
        this.setEnabled(false);

        Risco r = this.risco;

        if (r == null) {
            new TelaCadastroAcoes(this).setVisible(true);
        } else {
            new TelaCadastroAcoes(this, r).setVisible(true);
        }
    }//GEN-LAST:event_jButtonCadastrarAcoesActionPerformed

    private void jButtonRelatorioRiscosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRelatorioRiscosActionPerformed

        System.out.println("Clique no botão para exibir o relatório");
        System.out.println("Exibir tela de relatório");

        //Desabilitando a tela principal
        this.setEnabled(false);

        new TelaRelatorio(this).setVisible(true);
    }//GEN-LAST:event_jButtonRelatorioRiscosActionPerformed

    private void jButtonExportarDadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExportarDadosActionPerformed
        System.out.println("Clique no botão para fazer backup dos riscos");

        //Obtendo a data do backup para gerar um arquivo de dados
        Calendar calendar = Calendar.getInstance();
        Date date = calendar.getTime();
        DateFormat dateFormat = DateFormat.getDateInstance(DateFormat.FULL);
        String arquivo = "backup_" + dateFormat.format(date);
        String diretorio = "C:\\Users\\Public\\GestorRiscos\\";
        //Chama o controller para tentar fazer o backup do risco
        RiscoController controller = new RiscoController();
        if (controller.exportarRiscos(arquivo, diretorio)) {
            JOptionPane.showMessageDialog(this, "Backup realizado com sucesso!");
            System.out.println("Backup realizado com sucesso");
        } else {
            JOptionPane.showMessageDialog(this, "Erro ao realizar o backup");
            System.out.println("Erro ao realizar o backup");
        }
    }//GEN-LAST:event_jButtonExportarDadosActionPerformed

    private void jButtonImportarDadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonImportarDadosActionPerformed

        System.out.println("Clique no botão Importar Dados de Backup");
        //Pergunta ao usuário se realmente deseja fazer backup pois todos os 
        //itens já cadastradoes serão excluidos
        Object[] opcoes = {"Sim", "Não"};
        int opcao = JOptionPane.showOptionDialog(null, "Deseja ler dados do arquivo?",
                "Abrir", JOptionPane.DEFAULT_OPTION,
                JOptionPane.WARNING_MESSAGE, null, opcoes, opcoes[0]);

        if (opcao == 0 || opcao == -1) {

            //Adicionando filtro
            fc.setFileFilter(new FileNameExtensionFilter("Risk files", "grh"));

            //Chamando o file chooser
            int returnVal = fc.showOpenDialog(TelaPrincipal.this);

            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = fc.getSelectedFile();
                RepositoryManager.getInstance().importarBackup(file);
            } else {
                JOptionPane.showMessageDialog(this, "Importação dos dados de "
                        + "backup cancelada");
                System.out.println("Importacao de dados cancelada na janela"
                        + " de selecao de arquivos");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Importação dos dados de "
                    + "backup cancelada");
            System.out.println("Importacao de dados cancelada na confirmacao"
                    + " de realizacao do backup");
        }

    }//GEN-LAST:event_jButtonImportarDadosActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCadastrarAcoes;
    private javax.swing.JButton jButtonCadastrarRiscos;
    private javax.swing.JButton jButtonExportarDados;
    private javax.swing.JButton jButtonImportarDados;
    private javax.swing.JButton jButtonRelatorioRiscos;
    private javax.swing.JButton jButtonSair;
    // End of variables declaration//GEN-END:variables
}
